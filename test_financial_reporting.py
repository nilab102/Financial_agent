import sqlite3
import datetime
from decimal import Decimal
import os
import json # To potentially inspect parameters

# Import the functions to be tested
from utility_functions.utilities import (
    _execute_sql, # Keep helper if needed
    # Financial Reporting Functions
    list_recent_reports,
    view_report_metadata,
    # Other functions if needed
)

DATABASE_FILE = './database/financial_agent.db'

# --- Database Connection ---
def get_db_connection():
    """Establishes database connection with Decimal support."""
    if not os.path.exists(DATABASE_FILE):
        raise FileNotFoundError(f"Database file '{DATABASE_FILE}' not found. "
                              "Please run the SQL script first.")

    conn = sqlite3.connect(DATABASE_FILE, detect_types=sqlite3.PARSE_DECLTYPES)
    conn.row_factory = sqlite3.Row # Access columns by name
    conn.execute("PRAGMA foreign_keys = ON;")

    # Register adapter/converter for Decimal
    sqlite3.register_adapter(Decimal, str)
    sqlite3.register_converter("DECIMAL", lambda b: Decimal(b.decode('utf-8')))

    return conn

# --- Test Execution ---
if __name__ == "__main__":
    conn = None
    try:
        conn = get_db_connection()
        print(f"--- Connected to Database: {DATABASE_FILE} ---")
        print("\n--- Testing Financial Reporting Functions ---")

        # --- Test Data ---
        test_limit = 3
        test_report_id = 1 # January 2025 Income Statement from sample data


        # == 1. Test list_recent_reports ==
        print(f"\n1. Testing list_recent_reports (Limit: {test_limit})...")
        recent_reports = list_recent_reports(conn, limit=test_limit)

        if recent_reports is not None and isinstance(recent_reports, list):
            print(f"   PASS: Retrieved list of {len(recent_reports)} recent reports (max {test_limit}).")
            if len(recent_reports) > 0:
                 if isinstance(recent_reports[0], (dict, sqlite3.Row)):
                      print(f"      PASS: List contains dict/Row objects.")
                      sample_report = recent_reports[0] # Should be the most recent
                      print(f"      Most Recent Sample Report: ID={sample_report['ReportID']}, Name={sample_report['ReportName']}, "
                            f"Type={sample_report['ReportType']}, GeneratedBy={sample_report['GeneratedByName']}")
                 else:
                      print(f"      FAIL: List elements are not dict/Row, type: {type(recent_reports[0])}")
            else:
                 print("      WARN: Recent reports list is empty (check sample data).")
        elif recent_reports is None:
             print("   FAIL: list_recent_reports returned None (check DB errors).")
        else:
             print(f"   FAIL: Expected a list for reports, got {type(recent_reports)}.")


        # == 2. Test view_report_metadata ==
        print(f"\n2. Testing view_report_metadata (Report ID: {test_report_id})...")
        metadata = view_report_metadata(conn, test_report_id)

        if metadata and isinstance(metadata, (dict, sqlite3.Row)):
             if metadata['ReportID'] == test_report_id:
                 print("   PASS: Retrieved metadata for report.")
                 print(f"      - Name: {metadata['ReportName']}, Type: {metadata['ReportType']}")
                 print(f"      - Generated By: {metadata['GeneratedByName']}, Date: {metadata['GenerationDate']}")
                 print(f"      - Fiscal Year: {metadata.get('FiscalYearStart', 'N/A')} - {metadata.get('FiscalYearEnd', 'N/A')}")
                 print(f"      - Period: {metadata.get('FiscalPeriod', 'N/A')} ({metadata.get('PeriodStart', 'N/A')} - {metadata.get('PeriodEnd', 'N/A')})")
                 print(f"      - Parameters: {metadata.get('Parameters', 'N/A')}")
                 # Optionally try parsing parameters if stored as JSON
                 try:
                     params_dict = json.loads(metadata.get('Parameters', '{}'))
                     print(f"      - Parsed Parameter 'detailed': {params_dict.get('detailed', 'Not Found')}")
                 except (json.JSONDecodeError, TypeError):
                     print("      - INFO: Parameters field is not valid JSON or is empty.")

             else:
                 print(f"   FAIL: Retrieved metadata, but ReportID mismatch (Got {metadata['ReportID']}).")
        elif metadata is None:
             print(f"   FAIL: view_report_metadata returned None for ReportID {test_report_id}.")
        else:
             print(f"   FAIL: Expected dict/Row, got {type(metadata)}.")

        # Test with a non-existent report ID
        non_existent_id = 99999
        print(f"   Testing view_report_metadata (Non-existent Report ID: {non_existent_id})...")
        non_existent_metadata = view_report_metadata(conn, non_existent_id)
        if non_existent_metadata is None:
             print("   PASS: Correctly returned None for non-existent report ID.")
        else:
             print(f"   FAIL: Incorrectly returned data for non-existent report ID: {non_existent_metadata}")


        print("\n--- Financial Reporting Function Tests Complete ---")

    except FileNotFoundError as e:
        print(f"ERROR: {e}")
    except sqlite3.Error as e:
        print(f"DATABASE ERROR: {e}")
        if conn:
            conn.rollback()
    except Exception as e:
        print(f"UNEXPECTED ERROR during testing: {e}")
        import traceback
        traceback.print_exc()
    finally:
        if conn:
            conn.close()
            print("\n--- Database Connection Closed ---")